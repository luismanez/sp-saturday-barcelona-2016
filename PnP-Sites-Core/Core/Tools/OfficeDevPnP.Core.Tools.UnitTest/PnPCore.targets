<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="BuildAndUnitTestPnP">
  
  <!-- Input passing via command line...if nothing is supplied let's default to below value-->
  <PropertyGroup Label="CommandLine">
    <PnPConfigurationToTest>OnlineCred</PnPConfigurationToTest>
  </PropertyGroup>
  
  <!-- PnP Repo information -->
  <PropertyGroup Label="PnP">
    <PnPRepo>c:\temp\pnpbuild</PnPRepo>
    <PnPRepoUrl>https://github.com/OfficeDev/PnP-Sites-Core.git</PnPRepoUrl>
  </PropertyGroup>
  
  <!-- Unit test information-->
  <PropertyGroup Label="Test information">
    <ConfigurationPath>C:\GitHub\BertPnPSitesCore\Core\Tools\OfficeDevPnP.Core.Tools.UnitTest\OfficeDevPnP.Core.Tools.UnitTest.PnPBuildExtensions</ConfigurationPath>
    <PnPExtensionsAssembly>$(ConfigurationPath)\bin\Debug\OfficeDevPnP.Core.Tools.UnitTest.PnPBuildExtensions.dll</PnPExtensionsAssembly>
    <ConfigurationFile>mastertestconfiguration.xml</ConfigurationFile>
    <TestResultsPath>$(PnPRepo)temp</TestResultsPath>
    <VSTestExe>C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe</VSTestExe>
    <VSTestExtensionPath>C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\CommonExtensions\Microsoft\TestWindow\Extensions</VSTestExtensionPath>
  </PropertyGroup>
  
  <!-- Git information -->
  <PropertyGroup Label="Git">
    <GitPath>C:\Program Files (x86)\Git\cmd\</GitPath>
    <GitExe>&quot;$(GitPath)git.exe&quot;</GitExe>
    <Git>$(GitExe) --work-tree=&quot;$(PnPRepo)&quot; --git-dir=&quot;$(PnPRepo)\.git&quot;</Git>
  </PropertyGroup>
  
  <!-- Custom tasks registration -->
  <UsingTask AssemblyFile="$(PnPExtensionsAssembly)" TaskName="PnPXmlAppConfigReaderTask" />
  <UsingTask AssemblyFile="$(PnPExtensionsAssembly)" TaskName="PnPXmlAppConfigGeneratorTask" />
  <UsingTask AssemblyFile="$(PnPExtensionsAssembly)" TaskName="PnPTestSummaryTask" />
  
  <Target Name="BuildAndUnitTestPnP">

    <!-- Read the needed variables from the master configuration file-->
    <Message Text="=================================================================================" />
    <PnPAppConfigReaderTask ConfigurationFile="$(ConfigurationPath)\$(ConfigurationFile)" Configuration="$(PnPConfigurationToTest)">
      <Output PropertyName="PnPBuildConfiguration" TaskParameter="PnPBuildConfiguration" />
      <Output PropertyName="PnPBranch" TaskParameter="PnPBranch" />
    </PnPAppConfigReaderTask>
    <Message Text="PnP Solution Build Configuration that will be used: $(PnPBuildConfiguration)" />
    <Message Text="PnP Git branch that will be used: $(PnPBranch)" />
    <Message Text="=================================================================================" />
    
    <!-- Clone the PnP repo in case it's not yet available-->
    <Message Text="=================================================================================" />
    <Message Text="Working with the $(PnPRepoUrl) repository in folder $(PnPRepo)" Condition="Exists($(PnPRepo))" />
    <Message Text="Cloning the $(PnPRepoUrl) repository to $(PnPRepo)" Condition="!Exists($(PnPRepo))" />
    <Message Text="=================================================================================" />
    <Exec Command="$(GitExe) clone $(PnPRepoUrl) $(PnPRepo)" Condition="!Exists($(PnPRepo))" />
    
    <!-- Clean and refresh the PnP repo -->
    <Message Text="=================================================================================" />
    <Message Text="Cleaning the git repository" />
    <Message Text="=================================================================================" />
    <Exec Command="$(Git) checkout $(PnPBranch)" />
    <Exec Command="$(Git) reset" />
    <Exec Command="$(Git) checkout ." />
    <Exec Command="$(Git) clean -fdx" />
    <Exec Command="$(Git) fetch origin" /> 
    <Exec Command="$(Git) branch --set-upstream-to=origin/$(PnPBranch) $(PnPBranch)" />
    <Exec Command="$(Git) pull" />
    
    <!-- Create app.config with the specific test information -->
    <Message Text="=================================================================================" />
    <Message Text="Creating the app.config file needed to run unittests against PnP" />
    <Message Text="=================================================================================" />
    <PnPAppConfigGeneratorTask ConfigurationFile="$(ConfigurationPath)\$(ConfigurationFile)" Configuration="$(PnPConfigurationToTest)" AppConfigFolder="$(PnPRepo)\Core\OfficeDevPnP.Core.Tests" />
    
    <!-- Compile the OfficeDevPnP.Core solution -->
    <Message Text="=================================================================================" />
    <Message Text="Build the PnP solution using configuration $(PnPBuildConfiguration)" />
    <Message Text="=================================================================================" />
    <Exec Command="$(ConfigurationPath)\nuget.exe restore $(PnPRepo)\Core\OfficeDevPnP.Core.sln" />
    <MSBuild Projects="$(PnPRepo)\Core\OfficeDevPnP.Core.sln" Properties="Configuration=$(PnPBuildConfiguration)"/>  
    
    <!-- Run unit tests -->
    <Message Text="=================================================================================" />
    <Message Text="Run the PnP unit tests" />
    <Message Text="=================================================================================" />
    <!-- /Tests:DeserializeListIsNotFixedSizeTest,DeserializeListTest,CanSerializeDomainObjectWithJsonFormatter -->
    <Exec Command="&quot;$(VSTestExe)&quot; &quot;$(PnPRepo)\Core\OfficeDevPnP.Core.Tests\bin\$(PnPBuildConfiguration)\OfficeDevPnP.Core.Tests.dll&quot; /Logger:MDLogger;PnPConfigurationToTest=$(PnPConfigurationToTest);PnPBranch=$(PnPBranch);PnPBuildConfiguration=$(PnPBuildConfiguration);MDPath=$(TestResultsPath)" IgnoreExitCode="true" />    

  </Target>

  <Target Name="PushResultsToGitHub">

    <!-- Generate MD summary file -->
    <Message Text="=================================================================================" />
    <Message Text="Generate PnP Unit test summary file" />
    <Message Text="=================================================================================" />
    <PnPTestSummaryTask TestResultsPath="$(TestResultsPath)" />
     
    <!-- Push to github -->
    <Message Text="=================================================================================" />
    <Message Text="Push MD unit test result files into github" />
    <Message Text="=================================================================================" /> 
    <!-- Ensure we're on the dev branch since we're only allowing commits from the dev branch -->
    <Exec Command="$(Git) checkout dev" />    
    <!-- Copy from staging location to folder in local repo-->
    <ItemGroup>
      <MDFiles Include="$(TestResultsPath)\*.*" />
      <UnitTestResults Include="$(PnPRepo)\Core\UnitTestResults\*.*" />
    </ItemGroup>
    <!-- First cleanup the files we've copied previously...needed to deal with deletes-->
    <Delete Files="@(UnitTestResults)" />
    <!-- Now copy the files -->
    <Copy SourceFiles="@(MDFiles)" DestinationFolder="$(PnPRepo)\Core\UnitTestResults" />    
    <!-- Commit the files to git -->
    <Exec Command="$(Git) add Core\UnitTestResults\*.*" />
    <Exec Command="$(Git) commit Core\UnitTestResults --only --message=&quot;PnP Automated unit test results commit&quot;" />
    <Exec Command="$(Git) pull" />
    <Exec Command="$(Git) push origin" />
  
  </Target>

</Project>
